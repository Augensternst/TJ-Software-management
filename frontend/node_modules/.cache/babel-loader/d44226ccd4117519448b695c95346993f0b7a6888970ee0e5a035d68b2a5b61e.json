{"ast":null,"code":"import { ArcElement, Chart, DoughnutController } from 'chart.js';\n\n// 注册 Chart.js 组件\nChart.register(DoughnutController, ArcElement);\n\n/**\n * 绘制健康度圆环图\n * @param {HTMLCanvasElement} canvas - Canvas 元素\n * @param {number} healthData - 健康度数据（0-100）\n */\nexport const drawHealthChart = (canvas, healthData) => {\n  if (!canvas) return;\n\n  // 销毁已经有的\n  if (canvas.chart) {\n    canvas.chart.destroy(); // 销毁之前的 Chart 实例\n  }\n  const ctx = canvas.getContext('2d');\n\n  // 根据健康度设置颜色\n  const getHealthColor = health => {\n    if (health >= 80) return '#55F0BD'; // 绿色\n    if (health >= 50) return '#E4EE53'; // 黄色\n    return '#FF0E0E'; // 红色\n  };\n  const healthColor = getHealthColor(healthData);\n  canvas.chart = new Chart(ctx, {\n    type: 'doughnut',\n    data: {\n      datasets: [{\n        data: [healthData, 100 - healthData],\n        // 健康度和剩余部分\n        backgroundColor: [healthColor, '#212A42'],\n        // 颜色\n        borderWidth: 0 // 去掉边框\n      }]\n    },\n    options: {\n      responsive: true,\n      // 启用响应式\n      aspectRatio: 1.5,\n      // 宽高比\n      cutout: '60%',\n      // 圆环的宽度\n      rotation: 0,\n      // 从顶部开始\n      circumference: 360,\n      // 完整的圆环\n      animation: {\n        animateRotate: true,\n        // 启用旋转动画\n        animateScale: true // 启用缩放动画\n      },\n      plugins: {\n        legend: {\n          display: false // 不显示图例\n        },\n        tooltip: {\n          enabled: false // 不显示提示\n        }\n      }\n    },\n    plugins: [{\n      id: 'healthText',\n      // 自定义插件 ID\n      beforeDraw: chart => {\n        const {\n          ctx,\n          chartArea: {\n            width,\n            height\n          }\n        } = chart;\n        // console.log(width);\n        ctx.save(); // 保存当前绘图状态\n\n        // 动态计算字体大小（基于 canvas 宽度）\n        const fontSize = Math.max(10, width * 0.1); // 字体大小至少为 10px，最大为宽度的 10%\n        ctx.font = `bold ${fontSize}px Arial`; // 设置字体大小\n        ctx.fillStyle = healthColor; // 文本颜色与圆环颜色一致\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n\n        // 在圆环中心绘制健康度数字\n        const text = `${healthData}`;\n        const x = width / 2;\n        const y = height / 2;\n        ctx.fillText(text, x, y);\n        ctx.restore(); // 恢复绘图状态\n      }\n    }]\n  });\n};","map":{"version":3,"names":["ArcElement","Chart","DoughnutController","register","drawHealthChart","canvas","healthData","chart","destroy","ctx","getContext","getHealthColor","health","healthColor","type","data","datasets","backgroundColor","borderWidth","options","responsive","aspectRatio","cutout","rotation","circumference","animation","animateRotate","animateScale","plugins","legend","display","tooltip","enabled","id","beforeDraw","chartArea","width","height","save","fontSize","Math","max","font","fillStyle","textAlign","textBaseline","text","x","y","fillText","restore"],"sources":["E:/Wuhuairline/frontend/src/utils/drawHealthChart.js"],"sourcesContent":["import {ArcElement, Chart, DoughnutController} from 'chart.js';\n\n// 注册 Chart.js 组件\nChart.register(DoughnutController, ArcElement);\n\n/**\n * 绘制健康度圆环图\n * @param {HTMLCanvasElement} canvas - Canvas 元素\n * @param {number} healthData - 健康度数据（0-100）\n */\nexport const drawHealthChart = (canvas, healthData) => {\n  if (!canvas) return;\n\n  // 销毁已经有的\n  if (canvas.chart) {\n    canvas.chart.destroy(); // 销毁之前的 Chart 实例\n  }\n\n  const ctx = canvas.getContext('2d');\n\n  // 根据健康度设置颜色\n  const getHealthColor = (health) => {\n    if (health >= 80) return '#55F0BD'; // 绿色\n    if (health >= 50) return '#E4EE53'; // 黄色\n    return '#FF0E0E'; // 红色\n  };\n\n  const healthColor = getHealthColor(healthData);\n\n  canvas.chart=new Chart(ctx, {\n    type: 'doughnut',\n    data: {\n      datasets: [\n        {\n          data: [healthData, 100 - healthData], // 健康度和剩余部分\n          backgroundColor: [healthColor, '#212A42'], // 颜色\n          borderWidth: 0, // 去掉边框\n        },\n      ],\n    },\n    options: {\n      responsive: true, // 启用响应式\n      aspectRatio: 1.5, // 宽高比\n      cutout: '60%', // 圆环的宽度\n      rotation: 0, // 从顶部开始\n      circumference: 360, // 完整的圆环\n      animation: {\n        animateRotate: true, // 启用旋转动画\n        animateScale: true, // 启用缩放动画\n      },\n      plugins: {\n        legend: {\n          display: false, // 不显示图例\n        },\n        tooltip: {\n          enabled: false, // 不显示提示\n        },\n      },\n    },\n    plugins: [{\n      id: 'healthText', // 自定义插件 ID\n      beforeDraw: (chart) => {\n        const {ctx, chartArea: {width, height}} = chart;\n        // console.log(width);\n        ctx.save(); // 保存当前绘图状态\n\n        // 动态计算字体大小（基于 canvas 宽度）\n        const fontSize = Math.max(10, width * 0.1); // 字体大小至少为 10px，最大为宽度的 10%\n        ctx.font = `bold ${fontSize}px Arial`; // 设置字体大小\n        ctx.fillStyle = healthColor; // 文本颜色与圆环颜色一致\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n\n        // 在圆环中心绘制健康度数字\n        const text = `${healthData}`;\n        const x = width / 2;\n        const y = height / 2;\n        ctx.fillText(text, x, y);\n\n        ctx.restore(); // 恢复绘图状态\n      },\n    }],\n  });\n\n\n};"],"mappings":"AAAA,SAAQA,UAAU,EAAEC,KAAK,EAAEC,kBAAkB,QAAO,UAAU;;AAE9D;AACAD,KAAK,CAACE,QAAQ,CAACD,kBAAkB,EAAEF,UAAU,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,eAAe,GAAGA,CAACC,MAAM,EAAEC,UAAU,KAAK;EACrD,IAAI,CAACD,MAAM,EAAE;;EAEb;EACA,IAAIA,MAAM,CAACE,KAAK,EAAE;IAChBF,MAAM,CAACE,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;EAC1B;EAEA,MAAMC,GAAG,GAAGJ,MAAM,CAACK,UAAU,CAAC,IAAI,CAAC;;EAEnC;EACA,MAAMC,cAAc,GAAIC,MAAM,IAAK;IACjC,IAAIA,MAAM,IAAI,EAAE,EAAE,OAAO,SAAS,CAAC,CAAC;IACpC,IAAIA,MAAM,IAAI,EAAE,EAAE,OAAO,SAAS,CAAC,CAAC;IACpC,OAAO,SAAS,CAAC,CAAC;EACpB,CAAC;EAED,MAAMC,WAAW,GAAGF,cAAc,CAACL,UAAU,CAAC;EAE9CD,MAAM,CAACE,KAAK,GAAC,IAAIN,KAAK,CAACQ,GAAG,EAAE;IAC1BK,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE;MACJC,QAAQ,EAAE,CACR;QACED,IAAI,EAAE,CAACT,UAAU,EAAE,GAAG,GAAGA,UAAU,CAAC;QAAE;QACtCW,eAAe,EAAE,CAACJ,WAAW,EAAE,SAAS,CAAC;QAAE;QAC3CK,WAAW,EAAE,CAAC,CAAE;MAClB,CAAC;IAEL,CAAC;IACDC,OAAO,EAAE;MACPC,UAAU,EAAE,IAAI;MAAE;MAClBC,WAAW,EAAE,GAAG;MAAE;MAClBC,MAAM,EAAE,KAAK;MAAE;MACfC,QAAQ,EAAE,CAAC;MAAE;MACbC,aAAa,EAAE,GAAG;MAAE;MACpBC,SAAS,EAAE;QACTC,aAAa,EAAE,IAAI;QAAE;QACrBC,YAAY,EAAE,IAAI,CAAE;MACtB,CAAC;MACDC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,OAAO,EAAE,KAAK,CAAE;QAClB,CAAC;QACDC,OAAO,EAAE;UACPC,OAAO,EAAE,KAAK,CAAE;QAClB;MACF;IACF,CAAC;IACDJ,OAAO,EAAE,CAAC;MACRK,EAAE,EAAE,YAAY;MAAE;MAClBC,UAAU,EAAG3B,KAAK,IAAK;QACrB,MAAM;UAACE,GAAG;UAAE0B,SAAS,EAAE;YAACC,KAAK;YAAEC;UAAM;QAAC,CAAC,GAAG9B,KAAK;QAC/C;QACAE,GAAG,CAAC6B,IAAI,CAAC,CAAC,CAAC,CAAC;;QAEZ;QACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEL,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC;QAC5C3B,GAAG,CAACiC,IAAI,GAAG,QAAQH,QAAQ,UAAU,CAAC,CAAC;QACvC9B,GAAG,CAACkC,SAAS,GAAG9B,WAAW,CAAC,CAAC;QAC7BJ,GAAG,CAACmC,SAAS,GAAG,QAAQ;QACxBnC,GAAG,CAACoC,YAAY,GAAG,QAAQ;;QAE3B;QACA,MAAMC,IAAI,GAAG,GAAGxC,UAAU,EAAE;QAC5B,MAAMyC,CAAC,GAAGX,KAAK,GAAG,CAAC;QACnB,MAAMY,CAAC,GAAGX,MAAM,GAAG,CAAC;QACpB5B,GAAG,CAACwC,QAAQ,CAACH,IAAI,EAAEC,CAAC,EAAEC,CAAC,CAAC;QAExBvC,GAAG,CAACyC,OAAO,CAAC,CAAC,CAAC,CAAC;MACjB;IACF,CAAC;EACH,CAAC,CAAC;AAGJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}