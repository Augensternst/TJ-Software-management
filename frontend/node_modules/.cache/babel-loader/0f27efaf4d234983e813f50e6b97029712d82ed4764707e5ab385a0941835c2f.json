{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { drawChart } from '@/utils/drawChart'; // 引入绘制图表的脚本\nimport { drawHealthChart } from \"@/utils/drawHealthChart\";\nimport { getDeviceHealthData, getDeviceCards, getDeviceEnergyData } from '@/api/monitorCenterApi'; // 引入 API\n\nexport default {\n  name: 'MoniterCenter',\n  setup() {\n    const healthyCanvas = ref(null); // 引用 canvas 元素\n    const energyCanvas = ref(null);\n    const healthCharts = ref({});\n\n    // todo: 这里是从其他页面传过来的数据（可能是 设备中心？？）\n    const deviceId = 1;\n    const deviceName = \"设备名称\";\n    const deviceImage = \"@/assets/MonitorCenter/ex/ex.png\";\n    const energyCost = ref(48170);\n\n    // 图表数据\n    const healthyData = ref({\n      labels: [1, 2, 3, 4, 5, 6, 7],\n      // X 轴标签\n      datasets: [{\n        label: '健康度',\n        data: [1, 2, 3, 4, 5, 6, 7],\n        // Y 轴数据\n        backgroundColor: 'rgb(0, 243, 243)'\n      }]\n    });\n    const energyData = ref({\n      labels: [1, 2, 3, 4, 5, 6, 7],\n      // X 轴标签\n      datasets: [{\n        label: '能耗实时曲线',\n        data: [1, 2, 3, 4, 5, 6, 7],\n        // Y 轴数据\n        backgroundColor: 'rgb(85, 240, 189)'\n      }]\n    });\n\n    // 模拟传入的字典数据\n    const items = ref([{\n      name: '设备1',\n      value: 98,\n      unit: '%',\n      health: -1\n    }, {\n      name: '设备2',\n      value: 85,\n      unit: '%',\n      health: 80\n    }, {\n      name: '设备3',\n      value: 90,\n      unit: '%',\n      health: 88\n    }, {\n      name: '设备4',\n      value: 92,\n      unit: '%',\n      health: 91\n    }, {\n      name: '设备5',\n      value: 87,\n      unit: '%',\n      health: 84\n    }, {\n      name: '设备6',\n      value: 89,\n      unit: '%',\n      health: 86\n    }, {\n      name: '设备7',\n      value: 94,\n      unit: '%',\n      health: 90\n    }]);\n    const itemsPerPage = 12; // 每页最多显示12个卡片（3行 x 4列）\n    const currentPage = ref(1);\n\n    // 计算总页数\n    const totalPages = ref(1);\n\n    // 将 visibleItems 分成三行\n    const visibleRows = computed(() => {\n      const rows = [];\n      for (let i = 0; i < items.value.length; i += 4) {\n        rows.push(items.value.slice(i, i + 4));\n      }\n      return rows;\n    });\n\n    // 翻页逻辑\n    const prevPage = async () => {\n      if (currentPage.value > 1) {\n        currentPage.value--;\n        clearHealthCharts();\n        const cardsResponse = await getDeviceCards(deviceId, currentPage.value, itemsPerPage);\n        items.value = cardsResponse.items; // 更新当前页数据\n      }\n    };\n    const nextPage = async () => {\n      if (currentPage.value < totalPages.value) {\n        currentPage.value++;\n        clearHealthCharts();\n        const cardsResponse = await getDeviceCards(deviceId, currentPage.value, itemsPerPage);\n        items.value = cardsResponse.items; // 更新当前页数据\n      }\n    };\n    const setHealthChartRef = (el, health) => {\n      if (el) {\n        if (health >= 0) {\n          drawHealthChart(el, health);\n        }\n      }\n    };\n    const clearHealthCharts = () => {\n      const canvases = document.querySelectorAll('.health-chart');\n      canvases.forEach(canvas => {\n        if (canvas && canvas.chart) {\n          canvas.chart.destroy(); // 销毁 Chart 实例\n        }\n      });\n    };\n\n    // 在组件挂载后获取数据并绘制图表\n    onMounted(async () => {\n      try {\n        // 获取健康数据\n        const healthData = await getDeviceHealthData(deviceId);\n        healthyData.value.labels = healthData.labels;\n        healthyData.value.datasets[0].data = healthData.values;\n\n        // 获取能耗数据\n        const energyDataResponse = await getDeviceEnergyData(deviceId);\n        energyData.value.labels = energyDataResponse.labels;\n        energyData.value.datasets[0].data = energyDataResponse.values;\n        energyCost.value = energyDataResponse.energyCost;\n\n        // 获取卡片信息\n        const cardsData = await getDeviceCards(deviceId, currentPage.value, itemsPerPage);\n        items.value = cardsData.items;\n        totalPages.value = cardsData.totalPages;\n\n        // 绘制图表\n        if (healthyCanvas.value) {\n          console.log(\"绘制\");\n          drawChart(healthyCanvas.value, healthyData.value);\n        }\n        if (energyCanvas.value) {\n          drawChart(energyCanvas.value, energyData.value);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    });\n    return {\n      deviceName,\n      deviceImage,\n      healthCharts,\n      healthyCanvas,\n      energyCanvas,\n      items,\n      visibleRows,\n      currentPage,\n      totalPages,\n      prevPage,\n      nextPage,\n      setHealthChartRef,\n      energyCost\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","drawChart","drawHealthChart","getDeviceHealthData","getDeviceCards","getDeviceEnergyData","name","setup","healthyCanvas","energyCanvas","healthCharts","deviceId","deviceName","deviceImage","energyCost","healthyData","labels","datasets","label","data","backgroundColor","energyData","items","value","unit","health","itemsPerPage","currentPage","totalPages","visibleRows","rows","i","length","push","slice","prevPage","clearHealthCharts","cardsResponse","nextPage","setHealthChartRef","el","canvases","document","querySelectorAll","forEach","canvas","chart","destroy","healthData","values","energyDataResponse","cardsData","console","log","error"],"sources":["E:\\Wuhuairline\\frontend\\src\\views\\MonitorCenter.vue"],"sourcesContent":["<template>\r\n  <div class=\"monitor-center\">\r\n    <div class=\"top-section\">\r\n      <!-- 上半部分内容 -->\r\n      <div class=\"sub-section\">\r\n        <div class=\"svg-container svg-left\">\r\n          <div class=\"device-name\">\r\n            {{deviceName}}\r\n          </div>\r\n\r\n            <img :src=\"deviceImage\" alt=\"设备图片\" class=\"device-image\">\r\n          </div>\r\n\r\n      </div>\r\n\r\n      <div class=\"sub-section mid\">\r\n        <div class=\"svg-container svg-mid\">\r\n          <!-- 统计图容器 -->\r\n          <div class=\"canvas-container\" style=\"margin-top:10%\">\r\n            <canvas ref=\"healthyCanvas\" class=\"line-canvas\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"sub-section right\">\r\n        <div class=\"svg-container svg-right\">\r\n          <div class=\"energy-cost\">{{energyCost}} </div>\r\n          <div class=\"canvas-container\" style=\"margin-top:2%\">\r\n            <canvas ref=\"energyCanvas\" class=\"line-canvas\"></canvas>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"bottom-section\">\r\n      <!-- 下半部分内容 -->\r\n      <div class=\"bottom-container\">\r\n        <!-- 分页展示卡片 -->\r\n        <div v-for=\"(row, rowIndex) in visibleRows\" :key=\"rowIndex\" class=\"row-container\">\r\n          <div v-for=\"(item, colIndex) in row\" :key=\"colIndex\" class=\"card\">\r\n            <div class=\"card-body\">\r\n              <div style=\"flex:0.2;flex-direction: row;display:flex;\">\r\n                <img src=\"@/assets/MonitorCenter/Gear.svg\" alt=\"Gear\" class=\"gear\" style=\"width: 1vw;\" >\r\n                <span class=\"card-title\" style=\"text-align: center;flex:auto;font-family: 'Work Sans', sans-serif;color:#23FFC4;font-size:1vw\">{{ item.name }}</span>\r\n              </div>\r\n              <div style=\"flex:0.6;justify-content: center;align-content: center;margin-left:1vw;\">\r\n                <span class=\"card-value zendots-font\" style=\"font-size:2vw;\">{{ item.value }}</span>\r\n                <span class=\"card-unit zendots-font\" style=\"font-size:1vw;\">{{ item.unit }}</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"card-healthy\" v-if=\"item.health!==-1\">\r\n              <div style=\"text-align: center;flex:0.2;font-size:0.8vw;font-family: 'Work Sans', sans-serif;color:#23FFC4\" >健康度</div>\r\n              <div class=\"health-chart-container\">\r\n                <canvas :ref=\"el => setHealthChartRef(el, item.health)\" class=\"health-chart\"></canvas>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 翻页控件 -->\r\n        <div class=\"pagination-controls\" v-if=\"totalPages > 1\">\r\n          <button @click=\"prevPage\" :disabled=\"currentPage === 1\" style=\"background-color: transparent; color:#55F0BD\">◄</button>\r\n          <span style=\"color:#55F0BD;margin:1%\">{{ currentPage }} / {{ totalPages }}</span>\r\n          <button @click=\"nextPage\" :disabled=\"currentPage === totalPages \" style=\"background-color: transparent; color:#55F0BD\">►</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed } from 'vue';\r\nimport { drawChart } from '@/utils/drawChart'; // 引入绘制图表的脚本\r\nimport { drawHealthChart } from \"@/utils/drawHealthChart\";\r\nimport { getDeviceHealthData, getDeviceCards,getDeviceEnergyData } from '@/api/monitorCenterApi'; // 引入 API\r\n\r\nexport default {\r\n  name: 'MoniterCenter',\r\n  setup() {\r\n    const healthyCanvas = ref(null); // 引用 canvas 元素\r\n    const energyCanvas = ref(null);\r\n    const healthCharts = ref({});\r\n\r\n    // todo: 这里是从其他页面传过来的数据（可能是 设备中心？？）\r\n    const deviceId=1;\r\n    const deviceName=\"设备名称\";\r\n    const deviceImage=\"@/assets/MonitorCenter/ex/ex.png\";\r\n    const energyCost=ref(48170);\r\n\r\n    // 图表数据\r\n    const healthyData = ref({\r\n      labels: [1,2,3,4,5,6,7], // X 轴标签\r\n      datasets: [\r\n        {\r\n          label: '健康度',\r\n          data: [1,2,3,4,5,6,7], // Y 轴数据\r\n          backgroundColor: 'rgb(0, 243, 243)'\r\n        },\r\n      ],\r\n    });\r\n\r\n    const energyData = ref({\r\n      labels: [1,2,3,4,5,6,7], // X 轴标签\r\n      datasets: [\r\n        {\r\n          label: '能耗实时曲线',\r\n          data: [1,2,3,4,5,6,7], // Y 轴数据\r\n          backgroundColor: 'rgb(85, 240, 189)'\r\n        },\r\n      ],\r\n    });\r\n\r\n    // 模拟传入的字典数据\r\n    const items = ref([\r\n      { name: '设备1', value: 98, unit: '%', health: -1 },\r\n      { name: '设备2', value: 85, unit: '%', health: 80 },\r\n      { name: '设备3', value: 90, unit: '%', health: 88 },\r\n      { name: '设备4', value: 92, unit: '%', health: 91 },\r\n      { name: '设备5', value: 87, unit: '%', health: 84 },\r\n      { name: '设备6', value: 89, unit: '%', health: 86 },\r\n      { name: '设备7', value: 94, unit: '%', health: 90 },\r\n    ]);\r\n\r\n    const itemsPerPage = 12; // 每页最多显示12个卡片（3行 x 4列）\r\n    const currentPage = ref(1);\r\n\r\n    // 计算总页数\r\n    const totalPages = ref(1);\r\n\r\n    // 将 visibleItems 分成三行\r\n    const visibleRows = computed(() => {\r\n      const rows = [];\r\n      for (let i = 0; i < items.value.length; i += 4) {\r\n        rows.push(items.value.slice(i, i + 4));\r\n      }\r\n      return rows;\r\n    });\r\n\r\n    // 翻页逻辑\r\n    const prevPage = async () => {\r\n      if (currentPage.value > 1) {\r\n        currentPage.value--;\r\n        clearHealthCharts();\r\n        const cardsResponse = await getDeviceCards(deviceId, currentPage.value, itemsPerPage);\r\n        items.value = cardsResponse.items; // 更新当前页数据\r\n      }\r\n    };\r\n\r\n    const nextPage = async () => {\r\n      if (currentPage.value < totalPages.value) {\r\n        currentPage.value++;\r\n        clearHealthCharts();\r\n        const cardsResponse = await getDeviceCards(deviceId, currentPage.value, itemsPerPage);\r\n        items.value = cardsResponse.items; // 更新当前页数据\r\n      }\r\n    };\r\n\r\n    const setHealthChartRef = (el, health) => {\r\n      if (el) {\r\n        if(health>=0){\r\n          drawHealthChart(el, health);\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n    const clearHealthCharts = () => {\r\n      const canvases = document.querySelectorAll('.health-chart');\r\n      canvases.forEach(canvas => {\r\n        if (canvas && canvas.chart) {\r\n          canvas.chart.destroy(); // 销毁 Chart 实例\r\n        }\r\n      });\r\n    };\r\n\r\n    // 在组件挂载后获取数据并绘制图表\r\n    onMounted(async () => {\r\n\r\n\r\n\r\n      try {\r\n        // 获取健康数据\r\n        const healthData = await getDeviceHealthData(deviceId);\r\n        healthyData.value.labels = healthData.labels;\r\n        healthyData.value.datasets[0].data = healthData.values;\r\n\r\n        // 获取能耗数据\r\n        const energyDataResponse = await getDeviceEnergyData(deviceId);\r\n        energyData.value.labels = energyDataResponse.labels;\r\n        energyData.value.datasets[0].data = energyDataResponse.values;\r\n        energyCost.value = energyDataResponse.energyCost;\r\n\r\n        // 获取卡片信息\r\n        const cardsData = await getDeviceCards(deviceId, currentPage.value, itemsPerPage);\r\n        items.value = cardsData.items;\r\n        totalPages.value=cardsData.totalPages;\r\n\r\n        // 绘制图表\r\n        if (healthyCanvas.value) {\r\n          console.log(\"绘制\");\r\n          drawChart(healthyCanvas.value, healthyData.value);\r\n        }\r\n        if (energyCanvas.value) {\r\n          drawChart(energyCanvas.value, energyData.value);\r\n        }\r\n\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    });\r\n\r\n    return {\r\n      deviceName,\r\n      deviceImage,\r\n      healthCharts,\r\n      healthyCanvas,\r\n      energyCanvas,\r\n      items,\r\n      visibleRows,\r\n      currentPage,\r\n      totalPages,\r\n      prevPage,\r\n      nextPage,\r\n      setHealthChartRef,\r\n      energyCost,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/assets/MonitorCenter/MonitorStyles.css';\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}