{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chart\",\n  class: \"chart-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["E:\\Wuhuairline\\frontend\\src\\components\\LineChart.vue"],"sourcesContent":["<template>\n  <div ref=\"chart\" class=\"chart-container\"></div>\n</template>\n\n<script>\nimport { ref, onMounted, onBeforeUnmount, watch } from 'vue';\nimport * as echarts from 'echarts';\n\nexport default {\n  props: {\n    chartData: {\n      type: Object,\n      default: () => ({\n        xAxis: ['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日'],\n        series: [\n          {\n            name: '已处理',\n            data: [32, 22, 30, 40, 21, 20, 3]\n          },\n          {\n            name: '未处理',\n            data: [12, 5, 7, 3, 2, 1, 0]\n          }\n        ]\n      })\n    }\n  },\n  setup(props) {\n    const chart = ref(null);\n    let myChart = null;\n\n    const updateChart = () => {\n      if (!myChart ||!chart.value) return;\n\n      const option = {\n        color: ['#7B68EE', '#FF9F7F'],\n        grid: {\n          containLabel: true\n        },\n        tooltip: {\n          trigger: 'axis',\n          backgroundColor: 'rgba(50, 50, 50, 0.7)',\n          borderColor: '#333',\n          textStyle: {\n            color: '#fff'\n          }\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          data: props.chartData.xAxis,\n          axisLine: { show: false },\n          axisLabel: { color: '#eee' }\n        },\n        yAxis: {\n          type: 'value',\n          axisLine: { show: false },\n          axisTick: { show: false },\n          splitLine: {\n            lineStyle: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            }\n          },\n          axisLabel: { color: '#eee' }\n        },\n        series: props.chartData.series.map(series => ({\n          ...series,\n          type: 'line',\n          symbolSize: 8,\n          lineStyle: { width: 1 },\n          emphasis: { focus: 'series' }\n        })),\n        legend: {\n          data: props.chartData.series.map(s => s.name),\n          left: \"center\",\n          bottom: \"bottom\",\n          textStyle: { color: '#eee' },\n          itemWidth: 15,\n          itemHeight: 10\n        }\n      };\n\n      // 使用 setOption 的第二个参数 notMerge: true 确保完整刷新\n      myChart.setOption(option, true);\n    };\n\n    const initChart = () => {\n      if (!chart.value) return;\n\n      if (!myChart) {\n        myChart = echarts.init(chart.value);\n        window.addEventListener(\"resize\", handleResize);\n      }\n\n      updateChart();\n    };\n\n    const handleResize = () => {\n      myChart && myChart.resize();\n    };\n\n    onMounted(() => {\n      initChart();\n    });\n\n    onBeforeUnmount(() => {\n      window.removeEventListener(\"resize\", handleResize);\n      if (myChart) {\n        myChart.dispose();\n        myChart = null;\n      }\n    });\n\n    watch(() => props.chartData, () => {\n      if (myChart) {\n        updateChart();\n      } else {\n        initChart();\n      }\n    }, { deep: true, immediate: true });\n\n    return { chart };\n  }\n};\n</script>\n\n<style scoped>\n.chart-container {\n  width: 100%;\n  height: 340px;\n}\n</style>\n"],"mappings":";;EACOA,GAAG,EAAC,OAAO;EAACC,KAAK,EAAC;;;uBAAvBC,mBAAA,CAA+C,OAA/CC,UAA+C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}