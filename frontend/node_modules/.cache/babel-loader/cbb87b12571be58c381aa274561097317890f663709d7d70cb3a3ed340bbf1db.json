{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chartContainer\",\n  class: \"chart-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","class","_createElementBlock","_hoisted_1"],"sources":["E:\\Wuhuairline\\frontend\\src\\components\\CircularDiagram.vue"],"sourcesContent":["<template>\n  <div ref=\"chartContainer\" class=\"chart-container\"></div>\n</template>\n\n<script>\nimport * as echarts from 'echarts'\nimport axios from 'axios'\n\nconst api = axios.create({\n  baseURL: process.env.VUE_APP_API_URL || 'https://af1f2aee-0858-4e5f-8a9e-6e279126c69d.mock.pstmn.io/api',\n  timeout: 10000\n})\nexport default {\n  name: 'AeroEngineChart',\n  props: {\n    device: {\n      type: Object,\n      default: () => ({\n        id: '#1111',\n        name: '航空发动机 A1'\n      })\n    }\n  },\n  data() {\n    return {\n      chart: null,\n      chartData: [],\n      isLoading: false,\n      errorMessage: ''\n    }\n  },\n  mounted() {\n    this.fetchComponentData();\n    window.addEventListener('resize', this.handleResize);\n  },\n  watch: {\n    // 监听设备ID变化，重新获取数据\n    'device.id': {\n      handler(newVal) {\n        if (newVal) {\n          this.fetchComponentData();\n        }\n      }\n    }\n  },\n  beforeUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    handleResize() {\n      this.chart && this.chart.resize()\n    },\n\n    // 向后端发起请求获取组件数据\n    async fetchComponentData() {\n      this.isLoading = true;\n      this.errorMessage = '';\n\n      try {\n        // 使用axios发起GET请求，传递设备ID作为参数\n        const response = await api.get('/device/components', {\n          params: {\n            deviceId: this.device.id\n          }\n        });\n\n        // 假设后端返回的数据格式为 { total: number, components: Array<{name: string, value: number}> }\n        if (response.data && response.data.components) {\n          this.chartData = response.data.components;\n          const totalValue = response.data.total || this.chartData.reduce((sum, item) => sum + item.value, 0);\n          // 获取数据后初始化或更新图表\n          if (this.chart) {\n            this.updateChart(totalValue);\n          } else {\n            this.initChart(totalValue);\n          }\n        }\n      } catch (error) {\n        console.error('获取组件数据失败:', error);\n        this.errorMessage = '获取数据失败，请稍后重试';\n      } finally {\n        this.isLoading = false;\n      }\n    },\n\n    // 初始化图表\n    initChart(totalValue) {\n      this.chart = echarts.init(this.$refs.chartContainer);\n      this.updateChart(totalValue);\n    },\n    getRandomHexColor() {\n      // 生成格式为 #RRGGBB 的随机颜色\n      return '#' + Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');\n    },\n    // 更新图表数据\n    updateChart(totalValue) {\n      if (!this.chart) return;\n\n      // 为每个组件数据添加样式信息\n      const colorMap = {\n        '叶片': '#8B5CF6',\n        '燃料器': '#F87171',\n        '风机': '#67E8F9',\n        '旁通管道': '#FCD34D',\n        'LPC': '#60A5FA',\n        'HPT': '#4ADE80',\n        'HPC': '#A78BFA'\n      };\n\n      const formattedData = this.chartData.map((item) => {\n        const color = colorMap[item.name] || this.getRandomHexColor();\n\n        return {\n          value: item.value,\n          name: item.name,\n          itemStyle: {color},\n          label: {\n            show: true,\n            position: 'outside',\n            color: '#fff',\n            formatter: item.value.toString(),\n          },\n          labelLine: {\n            show: true,\n            lineStyle: {\n              color\n            }\n          }\n        };\n      });\n\n      const option = {\n        title: {\n          text: totalValue.toString(),\n          left: 'center',\n          top: 'center',\n          textStyle: {\n            color: '#fff',\n            fontSize: 24,\n            fontWeight: 'bold'\n          }\n        },\n        grid: {\n          left: '3%',\n          right: '20%',\n          bottom: '7%',\n          top: '4%',\n          containLabel: true\n        },\n        tooltip: {\n          trigger: 'item'\n        },\n        legend: {\n          right: \"right\",\n          bottom: 'center',\n          textStyle: {color: '#eee'},\n          itemHeight: 10,\n          itemWidth: 10,\n          icon: 'circle',\n        },\n        series: [\n          {\n            type: 'pie',\n            radius: ['30%', '80%'],\n            avoidLabelOverlap: true,\n            label: {\n              show: true,\n              position: 'outside',\n              formatter: '{value}',\n              color: '#fff',\n              fontSize: 14,\n              lineHeight: 20,\n              alignTo: 'edge',\n              edgeDistance: '15%',\n              distanceToLabelLine: 5\n            },\n            labelLine: {\n              show: true,\n              length: 4,\n              length2: 100,\n              smooth: false,\n              lineStyle: {\n                width: 1,\n                type: 'solid',\n                color: '#fff'\n              }\n            },\n            data: formattedData,\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: 16,\n                fontWeight: 'bold'\n              }\n            }\n          }\n        ]\n      };\n\n      this.chart.setOption(option);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chart-container {\n  width: 100%;\n  height: 200px;\n}\n</style>"],"mappings":";;EACOA,GAAG,EAAC,gBAAgB;EAACC,KAAK,EAAC;;;uBAAhCC,mBAAA,CAAwD,OAAxDC,UAAwD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}